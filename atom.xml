<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[nickTD.dev]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://nickTD.com/"/>
  <updated>2014-08-08T02:50:16.967Z</updated>
  <id>http://nickTD.com/</id>
  
  <author>
    <name><![CDATA[Nicholas T.]]></name>
    <email><![CDATA[Nicholas.TD07@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Use Freetronics to Build Continuous Color Changing RGB Light]]></title>
    <link href="http://nickTD.com/2014/08/08/use-freetronics-to-build-continuous-color-changing-rgb-light/"/>
    <id>http://nickTD.com/2014/08/08/use-freetronics-to-build-continuous-color-changing-rgb-light/</id>
    <published>2014-08-08T02:46:58.000Z</published>
    <updated>2014-08-08T02:50:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="The_Idea">The Idea</h2>
<p>When I went through all the parts inside Freetronics Experiment Kit, and when I saw the RGB LED lie inside the kit, I had this idea of continuous changing color LED. I had this image in my mind that the color of the RGB LED just changes and never stop.</p>
<h2 id="Connect_the_Hardware">Connect the Hardware</h2>
<p>Follow instructions of “Project 7:RGB LED” on page 32 in <a href="http://cdn.shopify.com/s/files/1/0045/8932/files/ExpKitGettingStartedGuide1.4.pdf?1121" target="_blank">Arduino Experimenters Kit Project Guide</a>.</p>
<h2 id="Github_Repo">Github Repo</h2>
<p>You can find the source file in this Github repo: <a href="https://github.com/NicholasTD07/freetronics" target="_blank">https://github.com/NicholasTD07/freetronics</a></p>
<h2 id="Software">Software</h2>
<p>To help people new to programming, I decided that every new version only makes a small change to the older one.</p>
<h3 id="V1">V1</h3>
<p>Let’s start with something simple: giving RGB LED a random color when we start the kit.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="keyword">int</span> leds[] = {<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>};
<span class="comment">// RGB pins.</span>
<span class="comment">// Change this according to your own hardware setting.</span>

<span class="keyword">void</span> setup() {
  <span class="keyword">for</span>(<span class="keyword">int</span> thisLed = <span class="number">0</span>; thisLed &lt; <span class="number">3</span>; thisLed++) {
    pinMode(leds[thisLed], OUTPUT);
    analogWrite(leds[thisLed], randomColor());
  }
}

<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> K_COLOR_MIN = <span class="number">0</span>;
<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> K_COLOR_MAX = <span class="number">255</span>;

<span class="comment">// Generate random color value from K_COLOR_MIN, to K_COLOR_MAX.</span>
<span class="keyword">int</span> randomColor() {
  <span class="keyword">return</span> random(K_COLOR_MIN, K_COLOR_MAX);
}

<span class="keyword">void</span> loop() {
}
</pre></td></tr></table></figure>


<p>This snippet of code will setup the pin mode for the pins on RGB LED and give RGB LED a random color, then do nothing since there’s no code inside function <code>loop</code>.</p>
<a id="more"></a>

<h3 id="V2">V2</h3>
<p>Let’s say we want the color of the RGB LED changes every 0.5 second. Then the only change is inside <code>loop</code> function and it should look like this:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">void</span> loop() {
  <span class="keyword">for</span>(<span class="keyword">int</span> thisLed = <span class="number">0</span>; thisLed &lt; <span class="number">3</span>; thisLed++) {
    analogWrite(leds[thisLed], randomColor());
  }
  delay(<span class="number">500</span>); <span class="comment">// 500 milliseconds = 0.5 seconds</span>
}
</pre></td></tr></table></figure>


<p>As you can see that we almost copied the code in <code>setup</code>. But we call function <code>delay</code> after setting RGB LED to a different color. The <code>delay</code> function “tells the Arduino to stop doing anything until a certain period of time is up.”(copied from <a href="http://cdn.shopify.com/s/files/1/0045/8932/files/ExpKitGettingStartedGuide1.4.pdf?1121" target="_blank">Arduino Experimenters Kit Project Guide</a>) That’s why there’s a 0.5 second pause from one change of color to another.</p>
<h3 id="V2-5">V2.5</h3>
<p>This line saying <code>analogWrite(leds[thisLed], randomColor());</code> is repeated twice. It’s duplicated code! I don’t like that.<br>Let’s do a little bit refactoring here by adding following function <code>setLed</code>.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">void</span> setLed(<span class="keyword">int</span> led, <span class="keyword">int</span> color) {
  analogWrite(led, color);    
}
</pre></td></tr></table></figure>


<p>And changes <code>analogWrite(leds[thisLed], randomColor());</code> to <code>setLed(leds[thisLed], randomColor());</code>.</p>
<p>You might wonder: “It’s still duplicated code. How’s this better?”</p>
<p><!-- TODO --><br>First of all, it gives the duplicated code a name. Without a proper name, meaning of a block of a code maybe not that obvious as it is to you to others reading your code.<br>Second of all, it cut down our code which depends on other code. This can be handy. Let’s say function <code>analogWrite</code> was renamed to <code>writeToAnalog</code>, then with this refactored code, you only need to make this change once.</p>
<p>(If you come up with something else why this refactoring is good, please feel free to reply in the comment :D)</p>
<h3 id="V3">V3</h3>
<p>Now, the color of LED changes periodically. But there’s no transition from one color to another. Let’s add that.</p>
<h4 id="V3-1">V3.1</h4>
<p>First, we need two variables to record current colors and target colors. And we want to generate two sets of random colors, one as LED’s current color, another as the target color.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">int</span> currentValues[<span class="number">3</span>];
<span class="keyword">int</span> targetValues[<span class="number">3</span>];

<span class="keyword">void</span> setup() {
  <span class="keyword">for</span>(<span class="keyword">int</span> thisLed = <span class="number">0</span>; thisLed &lt; <span class="number">3</span>; thisLed++) {
    pinMode(leds[thisLed], OUTPUT);

    <span class="keyword">int</span> currentValue = randomColor();
    setLed(leds[thisLed], currentValue);

    currentValues[thisLed] = currentValue;
    targetValues[thisLed] = randomColor();
  }
}
</pre></td></tr></table></figure>


<h4 id="V3-2">V3.2</h4>
<p>To Be Continued.</p>
<h3 id="Possible_Pitfalls">Possible Pitfalls</h3>
<h4 id="Output_to_one_pin_at_a_time">Output to one pin at a time</h4>
<p>If all the pins on RGB LED don’t get updated at the same time, the voltage of the pin which doesn’t get updated won’t hold. And that means actually the value on that pin will change, the color too.</p>
<h4 id="Reading_Values_from_OUTPUT_pin">Reading Values from OUTPUT pin</h4>
<p>At the beginning of Version 3, I once thought, “Hey, why can’t I just get current values of RGB color by reading from the pins and compare those with my target values.”</p>
<p>FAILED.</p>
<p>Here’s why:</p>
<p>The pin mode of LED’s pins are all set to <code>OUTPUT</code>, which means it really just can’t read values <strong>IN</strong>. Well, I tried and it just doesn’t work this way.</p>
<h2 id="The_End">The End</h2>
<p>Feel free to ask me anything. :D</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="The_Idea">The Idea</h2>
<p>When I went through all the parts inside Freetronics Experiment Kit, and when I saw the RGB LED lie inside the kit, I had this idea of continuous changing color LED. I had this image in my mind that the color of the RGB LED just changes and never stop.</p>
<h2 id="Connect_the_Hardware">Connect the Hardware</h2>
<p>Follow instructions of “Project 7:RGB LED” on page 32 in <a href="http://cdn.shopify.com/s/files/1/0045/8932/files/ExpKitGettingStartedGuide1.4.pdf?1121" target="_blank">Arduino Experimenters Kit Project Guide</a>.</p>
<h2 id="Github_Repo">Github Repo</h2>
<p>You can find the source file in this Github repo: <a href="https://github.com/NicholasTD07/freetronics" target="_blank">https://github.com/NicholasTD07/freetronics</a></p>
<h2 id="Software">Software</h2>
<p>To help people new to programming, I decided that every new version only makes a small change to the older one.</p>
<h3 id="V1">V1</h3>
<p>Let’s start with something simple: giving RGB LED a random color when we start the kit.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="keyword">int</span> leds[] = {<span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>};
<span class="comment">// RGB pins.</span>
<span class="comment">// Change this according to your own hardware setting.</span>

<span class="keyword">void</span> setup() {
  <span class="keyword">for</span>(<span class="keyword">int</span> thisLed = <span class="number">0</span>; thisLed &lt; <span class="number">3</span>; thisLed++) {
    pinMode(leds[thisLed], OUTPUT);
    analogWrite(leds[thisLed], randomColor());
  }
}

<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> K_COLOR_MIN = <span class="number">0</span>;
<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> K_COLOR_MAX = <span class="number">255</span>;

<span class="comment">// Generate random color value from K_COLOR_MIN, to K_COLOR_MAX.</span>
<span class="keyword">int</span> randomColor() {
  <span class="keyword">return</span> random(K_COLOR_MIN, K_COLOR_MAX);
}

<span class="keyword">void</span> loop() {
}
</pre></td></tr></table></figure>


<p>This snippet of code will setup the pin mode for the pins on RGB LED and give RGB LED a random color, then do nothing since there’s no code inside function <code>loop</code>.</p>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fixing Hexo's Deployer]]></title>
    <link href="http://nickTD.com/2014/04/25/fixing-hexos-deployer/"/>
    <id>http://nickTD.com/2014/04/25/fixing-hexos-deployer/</id>
    <published>2014-04-25T03:48:30.000Z</published>
    <updated>2014-04-26T22:44:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Missing_Deployers_in_Heroku">Missing Deployers in Heroku</h2>
<p>Some Deployers were not registered when they should be.</p>
<h2 id="TL;DR">TL;DR</h2>
<p>In <code>hexo/lib/plugins/deployer/heroku/index.js</code> and <code>.../deployer/openshift.js</code> there’s a line like this:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>commitMessage = <span class="keyword">require</span>(<span class="string">'../../util'</span>).commitMessage;
</pre></td></tr></table></figure>


<p>And, that <code>../..</code> is one level deeper than it needs to be.</p>
<p>Case closed. :D</p>
<a id="more"></a>

<h2 id="Detailed_Version">Detailed Version</h2>
<p>When I tried to deploy my blog to Heroku, this happened.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>[info] <span class="operator"><span class="keyword">Start</span> deploying: heroku
[error] TypeError: Property <span class="string">'heroku'</span> <span class="keyword">of</span> object #&lt;Object&gt; <span class="keyword">is</span> <span class="keyword">not</span> a function
TypeError: Property <span class="string">'heroku'</span> <span class="keyword">of</span> object #&lt;Object&gt; <span class="keyword">is</span> <span class="keyword">not</span> a function
    <span class="keyword">at</span> /usr/<span class="keyword">local</span>/lib/node_modules/hexo/lib/plugins/console/deploy.js:<span class="number">74</span>:<span class="number">21</span>
    <span class="keyword">at</span> iterate (/usr/<span class="keyword">local</span>/lib/node_modules/hexo/node_modules/async/lib/async.js:<span class="number">142</span>:<span class="number">13</span>)
    <span class="keyword">at</span> Object.async.eachSeries (/usr/<span class="keyword">local</span>/lib/node_modules/hexo/node_modules/async/lib/async.js:<span class="number">158</span>:<span class="number">9</span>)
    <span class="keyword">at</span> /usr/<span class="keyword">local</span>/lib/node_modules/hexo/lib/plugins/console/deploy.js:<span class="number">69</span>:<span class="number">11</span>
    <span class="keyword">at</span> /usr/<span class="keyword">local</span>/lib/node_modules/hexo/lib/plugins/console/deploy.js:<span class="number">35</span>:<span class="number">27</span>
    <span class="keyword">at</span> Object.cb [<span class="keyword">as</span> oncomplete] (fs.js:<span class="number">168</span>:<span class="number">19</span>)</span>
</pre></td></tr></table></figure>


<p>So I looked into <code>plugins/console/deploy.js</code>, and I added <code>log.i(&#39;deployers: &#39;, deployer);</code> after this block of code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span><span class="params">(args, callback)</span>{</span>
  <span class="keyword">var</span> config = hexo.config.deploy,
    log = hexo.log,
    extend = hexo.extend,
    deployer = extend.deployer.list();
</pre></td></tr></table></figure>


<p>Then this came up. <code>[info] deployers:  { git: [Function], github: [Function] }</code><br>That’s when I found that Heroku Deployer was not registered with two other deployers not registered, e.g. <em>openshift, rysnc</em>.</p>
<h3 id="How_Hexo_Loads_All_Deployers">How Hexo Loads All Deployers</h3>
<p>As you can see from the log above, somewhere on your disk there’s a folder called <code>node_modules</code> where <code>hexo</code> lies.</p>
<p>When you type <code>hexo deploy</code>, here’s what happens:</p>
<h4 id="TL;DR-1">TL;DR</h4>
<ol>
<li><code>hexo/lib/init.js</code> loads everything in <code>hexo/lib/loaders/</code></li>
<li><code>hexo/lib/loaders/extend.js</code> loads all <a href="http://hexo.io/api/classes/Extend.html" target="_blank">Extend/Plugins</a> including our <strong>Deployer</strong> by doing <code>require(&#39;../plugins/&#39; + item);</code>.</li>
<li><code>hexo/lib/plugins/deployer/index.js</code> registers every deployer by <code>requiring</code> them. (Well, you know, the <code>require</code> in JS).</li>
<li>That’s it.</li>
</ol>
<h4 id="Detailed_Version-1">Detailed Version</h4>
<ol>
<li><code>hexo/bin/hexo</code> calls <code>hexo/lib/init.js</code>.</li>
<li><code>init.js</code> loads other important things for Hexo, like <code>config</code>, <code>extend</code>, etc. with this piece of code:</li>
</ol>
<figure class="highlight nodejs"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>async.eachSeries([
  <span class="string">'logger'</span>,
  <span class="string">'extend'</span>,
  <span class="string">'config'</span>,
  <span class="string">'update'</span>,
  <span class="string">'database'</span>,
  <span class="string">'plugins'</span>,
  <span class="string">'scripts'</span>
], <span class="keyword">function</span>(name, <span class="keyword">next</span>){
  <span class="keyword">require</span>(<span class="string">'./loaders/'</span> + name)(<span class="keyword">next</span>); // THIS!
}, // <span class="keyword">...</span> more code
</pre></td></tr></table></figure>


<ol>
<li><code>hexo/lib/loaders/extend.js</code> loads <em>Deploy Plugin</em> with this line:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">try</span> {
  <span class="built_in">require</span>(<span class="string">'../plugins/'</span> + item);
  } <span class="keyword">catch</span> (e){
  hexo.log.e(<span class="string">"Failed loading: "</span> + item + <span class="string">" for: "</span> + e); <span class="regexp">//</span> THIS <span class="keyword">is</span> added <span class="keyword">by</span> me.
}
</pre></td></tr></table></figure>


<p>In our case item is the deployer.</p>
<ol>
<li>At last <code>hexo/lib/plugins/deployer/index.js</code> loads all deployers.</li>
</ol>
<h3 id="What_Went_Wrong">What Went Wrong</h3>
<p>In Deployers’ code of <em>Heroku</em> and <em>OpenShift</em> there is a line like this :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>commitMessage = <span class="keyword">require</span>(<span class="string">'../../util'</span>).commitMessage;
</pre></td></tr></table></figure>


<p>Only difference is the different locations of <code>deployer/heroku/index.js</code> and <code>deployer/openshift.js</code> causing the <code>..\..</code> part of <em>Heroku</em> is one level deeper than the <em>OpenShift</em> one.</p>
<h4 id="What_Really_Went_Wrong">What Really Went Wrong</h4>
<p>Yes! The <code>..\..</code> part. It is one level deeper than it actually need for both <em>Heroku</em> and <em>OpenShift</em>.</p>
<p>And maybe in that <code>catch</code> statement where I added a line of logging should have something similar there, letting people know what and where is the bug.</p>
<h3 id="What’s_More">What’s More</h3>
<p>Though <a href="http://hexo.io/docs/deployment.html#Batch_Deploy" target="_blank">here</a> it says it can, currently Hexo seems couldn’t handle <strong>Batch Deployment</strong> configuration which looks like this:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>deploy:
- type: github
  repo: <span class="keyword">...</span>
- type: heroku
  repo: <span class="keyword">...</span>
</pre></td></tr></table></figure>


]]></content>
    <summary type="html"><![CDATA[<h2 id="Missing_Deployers_in_Heroku">Missing Deployers in Heroku</h2>
<p>Some Deployers were not registered when they should be.</p>
<h2 id="TL;DR">TL;DR</h2>
<p>In <code>hexo/lib/plugins/deployer/heroku/index.js</code> and <code>.../deployer/openshift.js</code> there’s a line like this:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>commitMessage = <span class="keyword">require</span>(<span class="string">'../../util'</span>).commitMessage;
</pre></td></tr></table></figure>


<p>And, that <code>../..</code> is one level deeper than it needs to be.</p>
<p>Case closed. :D</p>
]]></summary>
    
      <category term="Hexo" scheme="http://nickTD.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello, Hexo! Good bye, Octopress!]]></title>
    <link href="http://nickTD.com/2014/04/21/2014-04-21-hello-world/"/>
    <id>http://nickTD.com/2014/04/21/2014-04-21-hello-world/</id>
    <published>2014-04-20T23:36:27.000Z</published>
    <updated>2014-04-25T09:05:27.000Z</updated>
    <content type="html"><![CDATA[<p>I am leaving Octopress for <a href="http://hexo.io" target="_blank">Hexo</a>.</p>
<h3 id="What_is_Hexo?">What is Hexo?</h3>
<blockquote>

<p>Hexo is a fast, simple and powerful blog framework. It parses your posts with Markdown or other render engine and generates static files with the beautiful theme. All of these just take seconds.</p>
<footer><strong>Hexo</strong><cite><a href="http://hexo.io/docs" target="_blank">hexo.io/docs/</a></cite></footer></blockquote>



<h3 id="So,_Octopress?">So, Octopress?</h3>
<p>It basically does the same thing. However, it is another framework.</p>
<h3 id="Why_Hexo?">Why Hexo?</h3>
<ul>
<li>Better and clearer documentation. See <a href="http://hexo.io/docs/" target="_blank">Hexo’s Doc</a>.<ul>
<li>Explains everything I need to know.<ul>
<li>How to setup Hexo.</li>
<li>Commands.</li>
<li>How Hexo works.</li>
<li>How to extend Hexo.</li>
<li>etc.</li>
</ul>
</li>
</ul>
</li>
<li>Easy installation and configuration, also easy extension.<ul>
<li>Good documentation.</li>
<li>Nice code.</li>
</ul>
</li>
<li>I get what I expected.<ul>
<li>Well, almost. See Pullquote section in “Read More”. Luckily I don’t think I am going to use it often. :D</li>
</ul>
</li>
</ul>
<h3 id="Why_Not_Octopress?">Why Not Octopress?</h3>
<ul>
<li>False documentation.<ul>
<li>In documentation’s example, everything looks fine, BUT,</li>
<li>Listed parameters for Codeblock/Backtick Code Block don’t work with fresh installed Octopress. More details listed in Codeblock section of this post.</li>
</ul>
</li>
<li>I thought I would get what all <a href="octopress.org">Octopress.org</a> has, I did NOT.<ul>
<li>The parameters I just mentioned.</li>
<li>The theme I had on my octopress was also different from octopress.org.</li>
</ul>
</li>
</ul>
<p>More for the old post: Hello, Octopress! - Unit Test Plugins<br><a id="more"></a></p>
<h2 id="Unit_Test_Plugins">Unit Test Plugins</h2>
<h3 id="Excerpts_Plugin_-_The_“Read_on”_button">Excerpts Plugin - The “Read on” button</h3>
<p>Just add <code>&lt;!-- more --&gt;</code> anywhere you want.</p>
<h3 id="Blockquote">Blockquote</h3>
<blockquote>

<p>Flying is learning how to throw yourself at the ground and miss.</p>
<footer><strong>Douglas Adams</strong><cite>The Hichhikers Guide to the Galaxy</cite></footer></blockquote>



<h3 id="Pullquote_-_Well,_Hexo_is_not_that_good_at_Pullquote">Pullquote - Well, Hexo is not that good at Pullquote</h3>
<blockquote class="pullquote class">

<p>Surround your paragraph with the pull quote tags. Then when you come to<br>the text you want to pull, {“ surround it like this “} and that’s all there is to it.</p>
</blockquote>





<blockquote class="pullquote left">

<p>Left-aligning pullquotes are good to alternate breaks in the text. They’re<br>{“ almost exactly like the default, “} right pullquotes, but a little different.</p>
</blockquote>



<p>If this line is not here, any line right below the quote will start from the middle, like how this line does.</p>
<p>So after a pullquote, you need at least one line to keep things normal. Like this:</p>
<pre><code>If this <span class="built_in">line</span> is <span class="operator">not</span> here, <span class="keyword">any</span> <span class="built_in">line</span> <span class="constant">right</span> below <span class="operator">the</span> <span class="constant">quote</span> will start <span class="built_in">from</span> <span class="operator">the</span> <span class="keyword">middle</span>, like how this <span class="built_in">line</span> does.

So <span class="keyword">after</span> <span class="operator">a</span> pullquote, you need <span class="keyword">at</span> least <span class="constant">one</span> <span class="built_in">line</span> <span class="built_in">to</span> keep things <span class="keyword">normal</span>. Like this:
</code></pre><h3 id="Codeblock">Codeblock</h3>
<figure class="highlight coffeescript"><figcaption><span>Coffeescript Tricks  start:51 mark:51,54-55</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment"># Given an alphabet:</span>
alphabet = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>

<span class="comment"># Iterate over part of the alphabet:</span>
<span class="built_in">console</span>.log letter <span class="keyword">for</span> letter <span class="keyword">in</span> alphabet[<span class="number">4.</span><span class="number">.8</span>]
</pre></td></tr></table></figure>



<p>As you can see, start and mark don’t work here after a clean install of Octopress.</p>
<p>See here: <a href="https://github.com/imathis/octopress/issues/1472" target="_blank">BUG: start, mark, and linenos don’t work in code blocks</a>.</p>
<h5 id="Gist_Tag">Gist Tag</h5>
<script src="https://gist.github.com/4321346.js"></script>



<p>It looks different in Octopress from the documentation <a href="http://octopress.org/docs/plugins/gist-tag/" target="_blank">Gist Tag - Octopress</a></p>
<h5 id="Backtick_Code_Block">Backtick Code Block</h5>
<figure class="highlight ruby"><figcaption><span>Discover if a number is prime</span><a href="http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/" target="_blank">Source Article</a></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Fixnum</span></span>
  <span class="function"><span class="keyword">def</span> </span>prime?
    (<span class="string">'1'</span> * <span class="keyword">self</span>) !~ <span class="regexp">/^1?$|^(11+?)\1+$/</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</pre></td></tr></table></figure>




<figure class="highlight coffeescript"><figcaption><span>Coffeescript Tricks start:51 mark:52,54-55</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment"># Given an alphabet:</span>
alphabet = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>

<span class="comment"># Iterate over part of the alphabet:</span>
<span class="built_in">console</span>.log letter <span class="keyword">for</span> letter <span class="keyword">in</span> alphabet[<span class="number">4.</span><span class="number">.8</span>]
</pre></td></tr></table></figure>


<p>Start and mark don’t work here either.</p>
<h3 id="Current_Commit_for_Octopress">Current Commit for Octopress</h3>
<pre><code>commit f6ed4125b56ee28775f0fe1c3ebac7d6ef33daf9
Merge: affa3ff c139f68
Author: Parker Moore &lt;parkrmoore@gmail.com&gt;
Date:   Thu Apr <span class="number">3</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">00</span> <span class="number">2014</span> -<span class="number">0400</span>

    Merge pull request <span class="comment">#1489 from duckpuppy/fix-update_style</span>

    Reversed update_style copy direction <span class="built_in">to</span> correctly restore <span class="operator">the</span> sass.old/custom <span class="built_in">files</span> <span class="built_in">to</span> <span class="operator">the</span> <span class="built_in">new</span> sass/custom <span class="built_in">folder</span>
</code></pre>]]></content>
    <summary type="html"><![CDATA[<p>I am leaving Octopress for <a href="http://hexo.io" target="_blank">Hexo</a>.</p>
<h3 id="What_is_Hexo?">What is Hexo?</h3>
<blockquote>

<p>Hexo is a fast, simple and powerful blog framework. It parses your posts with Markdown or other render engine and generates static files with the beautiful theme. All of these just take seconds.</p>
<footer><strong>Hexo</strong><cite><a href="http://hexo.io/docs" target="_blank">hexo.io/docs/</a></cite></footer></blockquote>



<h3 id="So,_Octopress?">So, Octopress?</h3>
<p>It basically does the same thing. However, it is another framework.</p>
<h3 id="Why_Hexo?">Why Hexo?</h3>
<ul>
<li>Better and clearer documentation. See <a href="http://hexo.io/docs/" target="_blank">Hexo’s Doc</a>.<ul>
<li>Explains everything I need to know.<ul>
<li>How to setup Hexo.</li>
<li>Commands.</li>
<li>How Hexo works.</li>
<li>How to extend Hexo.</li>
<li>etc.</li>
</ul>
</li>
</ul>
</li>
<li>Easy installation and configuration, also easy extension.<ul>
<li>Good documentation.</li>
<li>Nice code.</li>
</ul>
</li>
<li>I get what I expected.<ul>
<li>Well, almost. See Pullquote section in “Read More”. Luckily I don’t think I am going to use it often. :D</li>
</ul>
</li>
</ul>
<h3 id="Why_Not_Octopress?">Why Not Octopress?</h3>
<ul>
<li>False documentation.<ul>
<li>In documentation’s example, everything looks fine, BUT,</li>
<li>Listed parameters for Codeblock/Backtick Code Block don’t work with fresh installed Octopress. More details listed in Codeblock section of this post.</li>
</ul>
</li>
<li>I thought I would get what all <a href="octopress.org">Octopress.org</a> has, I did NOT.<ul>
<li>The parameters I just mentioned.</li>
<li>The theme I had on my octopress was also different from octopress.org.</li>
</ul>
</li>
</ul>
<p>More for the old post: Hello, Octopress! - Unit Test Plugins<br>]]></summary>
    
  </entry>
  
</feed>
